import com.well.modules.models.User;
import com.well.modules.models.UsersFilter.SortBy;
import kotlin.collections.Set;

CREATE TABLE Users (
    id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
    createdDate REAL NOT NULL,
    initialized BOOLEAN NOT NULL DEFAULT FALSE,
    fullName TEXT NOT NULL,
    type TEXT AS User.Type NOT NULL,
    email TEXT,
    profileImageUrl TEXT,
    phoneNumber TEXT,
    timeZoneIdentifier TEXT,
    credentials TEXT AS User.Credentials,
    academicRank TEXT AS User.AcademicRank,
    languages TEXT AS Set<User.Language> NOT NULL,
    skills TEXT AS Set<User.Skill> NOT NULL,
    bio TEXT,
    education TEXT,
    professionalMemberships TEXT,
    publications TEXT,
    twitter TEXT,
    doximity TEXT,

    facebookId TEXT,
    googleId TEXT,
    twitterId TEXT,
    appleId TEXT,

    countryCode TEXT,
    averageRating REAL NOT NULL DEFAULT 0,
    ratingsCount INTEGER NOT NULL DEFAULT 0
);

lastInsertId:
SELECT LAST_INSERT_ID();

exists:
SELECT EXISTS (SELECT * FROM Users WHERE id = ?);

getById:
SELECT * FROM Users WHERE id = ?;

getTypeById:
SELECT type FROM Users WHERE id = ?;

getByIds:
SELECT * FROM Users WHERE id IN ?;

getByFacebookId:
SELECT id FROM Users WHERE facebookId = ?;

getByGoogleId:
SELECT id FROM Users WHERE googleId = ?;

getByTwitterId:
SELECT id FROM Users WHERE twitterId = ?;

getByAppleId:
SELECT id FROM Users WHERE appleId = ?;
-- Create

insertFacebook:
INSERT INTO Users(fullName, createdDate,  type, email, facebookId, languages, skills)
VALUES (?, UNIX_TIMESTAMP(), ?, ?, ?, '', '');

insertGoogle:
INSERT INTO Users(fullName, createdDate,  type, email, googleId, languages, skills)
VALUES (?, UNIX_TIMESTAMP(), ?, ?, ?, '', '');

insertTwitter:
INSERT INTO Users(fullName, createdDate, type, twitterId, languages, skills)
VALUES ('', UNIX_TIMESTAMP(), ?, ?, '', '');

insertApple:
INSERT INTO Users(fullName, createdDate,  type, appleId, languages, skills)
VALUES (?, UNIX_TIMESTAMP(),NULL, NULL, '', '');

-- Update

updateProfileImage:
UPDATE Users
SET profileImageUrl = ?
WHERE id = ?;

updateType:
UPDATE Users
SET type = ?
WHERE id = ?;

updateRating:
UPDATE Users
SET averageRating = :average,
    ratingsCount = :count
WHERE id = ?;

updateUser:
UPDATE Users
SET initialized = TRUE,
    fullName = ?,
    email = ?,
    profileImageUrl = ?,
    phoneNumber = ?,
    countryCode = ?,
    timeZoneIdentifier = ?,
    credentials = ?,
    academicRank = ?,
    languages = ?,
    skills = ?,
    bio = ?,
    education = ?,
    professionalMemberships = ?,
    publications = ?,
    twitter = ?,
    doximity = ?
WHERE id = ?;

-- Filter
filter:
SELECT * FROM Users
WHERE
    initialized = TRUE
    AND id != :uid
    AND (:nameFilter = '' OR LOCATE(:nameFilter, fullName) > 0)
    AND (:favorites = FALSE OR
        id IN (
            SELECT Favourites.destination FROM Favourites WHERE owner = :uid
        )
    )
    AND (:skillsRegexp = '' OR skills REGEXP :skillsRegexp)
    AND (:academicRankRegexp = '' OR academicRank REGEXP :academicRankRegexp)
    AND (:languagesRegexp = '' OR languages REGEXP :languagesRegexp)
    AND (:countryCodeRegex = '' OR countryCode REGEXP :countryCodeRegex)
    AND (:withReviews = FALSE OR ratingsCount > 0)
    AND (:rating = NULL OR averageRating >= :rating)
    LIMIT 10
;

--     val sortBy: SortBy = SortBy.Popularity,
--     val rating: Rating = Rating.All,

-- Clean
selectUninitialized:
SELECT * FROM Users
WHERE initialized = FALSE AND UNIX_TIMESTAMP() - createdDate < 60 * 60 * 24;

deleteUninitialized:
DELETE FROM Users
WHERE initialized = FALSE AND UNIX_TIMESTAMP() - createdDate < 60 * 60 * 24;