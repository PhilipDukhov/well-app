import com.well.modules.models.User;
import com.well.modules.models.chat.ChatMessage;

CREATE TABLE ChatMessages (
    id BIGINT AS ChatMessage.Id NOT NULL PRIMARY KEY AUTO_INCREMENT,
    creation DOUBLE NOT NULL,
    fromId BIGINT AS User.Id NOT NULL,
    peerId BIGINT AS User.Id NOT NULL,
    contentType TEXT AS ChatMessage.Content.SimpleType NOT NULL
);

insert:
INSERT INTO ChatMessages (creation, fromId, peerId, contentType)
VALUES (?, ?, ?, ?);

lastInsertId:
SELECT LAST_INSERT_ID();

getAllForUser:
SELECT * FROM ChatMessages
WHERE
    (fromId = :id OR peerId = :id)
    AND (id > :lastPresentedId)
    ;

peerIdsList:
SELECT (CASE WHEN fromId = :id THEN peerId ELSE fromId END) FROM ChatMessages
WHERE
    (fromId = :id OR peerId = :id)
    AND creation IN (
        SELECT MAX(creation) AS creation FROM ChatMessages
        WHERE fromId = :id OR peerId = :id
        GROUP BY (CASE WHEN fromId = :id THEN peerId ELSE fromId END)
    )
ORDER BY ChatMessages.creation DESC;

getById:
SELECT * FROM ChatMessages WHERE id = ?;

unreadCount:
SELECT COUNT(id) FROM ChatMessages
    WHERE id > (
        SELECT messageId FROM LastReadMessages WHERE fromId = :fromId AND peerId = :peerId
    )
    AND fromId = :fromId AND peerId = :peerId
;

clearUser {
    DELETE FROM ChatContentImages
    WHERE messageId IN (
        SELECT id FROM ChatMessages
        WHERE fromId = :id OR peerId = :id
        );

    DELETE FROM ChatContentTexts
        WHERE messageId IN (
            SELECT id FROM ChatMessages
            WHERE fromId = :id OR peerId = :id
        );

    DELETE FROM ChatMessages
    WHERE fromId = :id OR peerId = :id;
}