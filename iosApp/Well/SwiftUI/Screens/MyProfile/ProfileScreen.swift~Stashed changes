//
//  ProfileScreen.swift
//  Well
//
//  Created by Philip Dukhov on 2/11/21.
//  Copyright Â© 2021 Well. All rights reserved.
//

import SwiftUI
import SharedMobile

struct ProfileScreen: View {
    let state: ProfileFeature.State
    let listener: (ProfileFeature.Msg) -> Void
    
    var body: some View {
        ZStack(alignment: .center) {
            Text("My profile")
            HStack {
                Spacer()
                Text("Edit")
                    .frame(minWidth: 45, minHeight: 45)
                    .onTapGesture {
                        listener(ProfileFeature.MsgStartEditing())
                    }
            }
        }.fillMaxWidth()
        .foregroundColor(.white)
        .background(Color.green.edgesIgnoringSafeArea(.top))
        List {
            HStack(spacing: 0) {
                ProfileImage(state.user)
                    .frame(size: 100)
                    .padding(.trailing)
                VStack(alignment: .leading, spacing: 7) {
                    Text(state.user.fullName)
                    HStack {
                        Image(systemName: "plus")
                            .font(.system(size: 14, weight: .black))
                        Text("doctor")
                    }.foregroundColorKMM(ColorConstants.LightBlue)
                    let completeness = state.user.completeness
                    Text("Profile \(completeness)% complete")
                        .foregroundColor(Color.gray)
                        .opacity(completeness < 100 ? 1 : 0)
                }
                Spacer()
            }
            .padding()
            ForEach(state.uiGroups, id: \.self) { group in
                VStack(alignment: .leading, spacing: 0) {
                    ForEach(group, id: \.self) { model in
                        HStack {
                            field(model)
                            Spacer()
                        }.padding(.horizontal)
                    }
                }.padding(.vertical)
            }
        }.listSeparatorStyle(.none)
    }
    
    func field(_ field: ProfileFeature.StateUIField) -> some View {
        VStack(alignment: .leading, spacing: 0) {
            Text(field.title)
                .foregroundColor(.gray)
                .padding(.bottom, 5)
            
            switch field.content {
            case let content as ProfileFeature.StateUIFieldContentText:
                Text(content.text)
                
            case let content as ProfileFeature.StateUIFieldContentList:
                HVStack(items: content.list) { item in
                    Text(item)
                        .padding(.vertical, 5)
                        .padding(.horizontal, 10)
                        .font(.body)
                        .backgroundColorKMM(ColorConstants.LightBlue.withAlpha(alpha: 0.15))
                        .foregroundColor(Color.black)
                        .clipShape(MaxRoundedRectangle())
                }

            case let content as ProfileFeature.StateUIFieldContentTextAndIcon:
                HStack {
                    Image(uiImage: content.icon.uiImage())
                        .foregroundColorKMM(ColorConstants.LightBlue)
                    Text(content.text)
                        .onTapGesture {
                            if content.isLink {
                                
                            }
                        }
                }
                
            default: fatalError()
            }
        }
    }
}

extension ProfileFeature.StateUIFieldIcon {
    fileprivate func uiImage() -> UIImage {
        switch self {
        case .location:
            return R.image.profile.location()!
        case .publications:
            return R.image.profile.publications()!
        case .twitter:
            return R.image.profile.twitter()!
        case .doximity:
            return R.image.profile.doximity()!
        default: fatalError()
        }
    }
}
